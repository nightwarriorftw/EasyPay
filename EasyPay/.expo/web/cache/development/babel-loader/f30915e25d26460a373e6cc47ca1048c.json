{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as Constants from \"./constants\";\nimport axios from \"axios\";\nexport var register = function register(data) {\n  var res;\n  return _regeneratorRuntime.async(function register$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(axios.post(Constants.REGISTER, data));\n\n        case 3:\n          res = _context.sent;\n          console.log(res);\n          return _context.abrupt(\"return\", res.data);\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          console.log(_context.t0);\n          return _context.abrupt(\"return\", handler(_context.t0));\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 8]], Promise);\n};\nexport var login = function login(data) {\n  var res;\n  return _regeneratorRuntime.async(function login$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(axios.post(Constants.LOGIN, data));\n\n        case 3:\n          res = _context2.sent;\n          return _context2.abrupt(\"return\", res.data);\n\n        case 7:\n          _context2.prev = 7;\n          _context2.t0 = _context2[\"catch\"](0);\n          return _context2.abrupt(\"return\", handler(_context2.t0));\n\n        case 10:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[0, 7]], Promise);\n};\nexport var handler = function handler(err) {\n  var error = err;\n  if (err.response && err.response.data.hasOwnProperty(\"message\")) error = err.response.data;else if (!err.hasOwnProperty(\"message\")) error = err.toJSON();\n  return new Error(error.message);\n};","map":{"version":3,"sources":["/home/nightwarrior-xxx/Documents/Minor/Minor2/EasyPay/EasyPay/api.js"],"names":["Constants","axios","register","data","post","REGISTER","res","console","log","handler","login","LOGIN","err","error","response","hasOwnProperty","toJSON","Error","message"],"mappings":";AAAA,OAAO,KAAKA,SAAZ;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAAMC,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAEJF,KAAK,CAACG,IAAN,CAAWJ,SAAS,CAACK,QAArB,EAA+BF,IAA/B,CAFI;;AAAA;AAEhBG,UAAAA,GAFgB;AAGpBC,UAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AAHoB,2CAIbA,GAAG,CAACH,IAJS;;AAAA;AAAA;AAAA;AAMpBI,UAAAA,OAAO,CAACC,GAAR;AANoB,2CAObC,OAAO,aAPM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAjB;AAWP,OAAO,IAAMC,KAAK,GAAG,SAARA,KAAQ,CAAMP,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAEDF,KAAK,CAACG,IAAN,CAAWJ,SAAS,CAACW,KAArB,EAA4BR,IAA5B,CAFC;;AAAA;AAEbG,UAAAA,GAFa;AAAA,4CAGVA,GAAG,CAACH,IAHM;;AAAA;AAAA;AAAA;AAAA,4CAKVM,OAAO,cALG;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAd;AASP,OAAO,IAAMA,OAAO,GAAG,SAAVA,OAAU,CAAAG,GAAG,EAAI;AAC5B,MAAIC,KAAK,GAAGD,GAAZ;AAEA,MAAIA,GAAG,CAACE,QAAJ,IAAgBF,GAAG,CAACE,QAAJ,CAAaX,IAAb,CAAkBY,cAAlB,CAAiC,SAAjC,CAApB,EACEF,KAAK,GAAGD,GAAG,CAACE,QAAJ,CAAaX,IAArB,CADF,KAEK,IAAI,CAACS,GAAG,CAACG,cAAJ,CAAmB,SAAnB,CAAL,EAAoCF,KAAK,GAAGD,GAAG,CAACI,MAAJ,EAAR;AAEzC,SAAO,IAAIC,KAAJ,CAAUJ,KAAK,CAACK,OAAhB,CAAP;AACD,CARM","sourcesContent":["import * as Constants from \"./constants\";\nimport axios from \"axios\";\n\nexport const register = async data => {\n  try {\n    let res = await axios.post(Constants.REGISTER, data);\n    console.log(res);\n    return res.data;\n  } catch (err) {\n    console.log(err);\n    return handler(err);\n  }\n};\n\nexport const login = async data => {\n  try {\n    let res = await axios.post(Constants.LOGIN, data);\n    return res.data;\n  } catch (err) {\n    return handler(err);\n  }\n};\n\nexport const handler = err => {\n  let error = err;\n\n  if (err.response && err.response.data.hasOwnProperty(\"message\"))\n    error = err.response.data;\n  else if (!err.hasOwnProperty(\"message\")) error = err.toJSON();\n\n  return new Error(error.message);\n};\n"]},"metadata":{},"sourceType":"module"}